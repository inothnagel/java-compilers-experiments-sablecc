/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.inothnagel.sablecc.grammars.ig01.node;

import com.inothnagel.sablecc.grammars.ig01.analysis.*;

@SuppressWarnings("nls")
public final class ADivSentence extends PSentence
{
    private TNumber _n1_;
    private TDiv _div_;
    private TNumber _n2_;

    public ADivSentence()
    {
        // Constructor
    }

    public ADivSentence(
        @SuppressWarnings("hiding") TNumber _n1_,
        @SuppressWarnings("hiding") TDiv _div_,
        @SuppressWarnings("hiding") TNumber _n2_)
    {
        // Constructor
        setN1(_n1_);

        setDiv(_div_);

        setN2(_n2_);

    }

    @Override
    public Object clone()
    {
        return new ADivSentence(
            cloneNode(this._n1_),
            cloneNode(this._div_),
            cloneNode(this._n2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADivSentence(this);
    }

    public TNumber getN1()
    {
        return this._n1_;
    }

    public void setN1(TNumber node)
    {
        if(this._n1_ != null)
        {
            this._n1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n1_ = node;
    }

    public TDiv getDiv()
    {
        return this._div_;
    }

    public void setDiv(TDiv node)
    {
        if(this._div_ != null)
        {
            this._div_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._div_ = node;
    }

    public TNumber getN2()
    {
        return this._n2_;
    }

    public void setN2(TNumber node)
    {
        if(this._n2_ != null)
        {
            this._n2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._n1_)
            + toString(this._div_)
            + toString(this._n2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._n1_ == child)
        {
            this._n1_ = null;
            return;
        }

        if(this._div_ == child)
        {
            this._div_ = null;
            return;
        }

        if(this._n2_ == child)
        {
            this._n2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._n1_ == oldChild)
        {
            setN1((TNumber) newChild);
            return;
        }

        if(this._div_ == oldChild)
        {
            setDiv((TDiv) newChild);
            return;
        }

        if(this._n2_ == oldChild)
        {
            setN2((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
