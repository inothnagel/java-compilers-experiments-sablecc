/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.inothnagel.sablecc.grammars.ig01.generated.analysis;

import java.util.*;
import com.inothnagel.sablecc.grammars.ig01.generated.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPExpression().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAddExpression(AAddExpression node)
    {
        defaultIn(node);
    }

    public void outAAddExpression(AAddExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpression(AAddExpression node)
    {
        inAAddExpression(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outAAddExpression(node);
    }

    public void inAMinExpression(AMinExpression node)
    {
        defaultIn(node);
    }

    public void outAMinExpression(AMinExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinExpression(AMinExpression node)
    {
        inAMinExpression(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getMin() != null)
        {
            node.getMin().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outAMinExpression(node);
    }

    public void inAMulExpression(AMulExpression node)
    {
        defaultIn(node);
    }

    public void outAMulExpression(AMulExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMulExpression(AMulExpression node)
    {
        inAMulExpression(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getMul() != null)
        {
            node.getMul().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outAMulExpression(node);
    }

    public void inADivExpression(ADivExpression node)
    {
        defaultIn(node);
    }

    public void outADivExpression(ADivExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpression(ADivExpression node)
    {
        inADivExpression(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outADivExpression(node);
    }
}
