/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.inothnagel.sablecc.grammars.ig01.analysis;

import java.util.*;
import com.inothnagel.sablecc.grammars.ig01.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPSentence().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPlusSentence(APlusSentence node)
    {
        defaultIn(node);
    }

    public void outAPlusSentence(APlusSentence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusSentence(APlusSentence node)
    {
        inAPlusSentence(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outAPlusSentence(node);
    }

    public void inAMinusSentence(AMinusSentence node)
    {
        defaultIn(node);
    }

    public void outAMinusSentence(AMinusSentence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusSentence(AMinusSentence node)
    {
        inAMinusSentence(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outAMinusSentence(node);
    }

    public void inADivSentence(ADivSentence node)
    {
        defaultIn(node);
    }

    public void outADivSentence(ADivSentence node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivSentence(ADivSentence node)
    {
        inADivSentence(node);
        if(node.getN1() != null)
        {
            node.getN1().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getN2() != null)
        {
            node.getN2().apply(this);
        }
        outADivSentence(node);
    }
}
