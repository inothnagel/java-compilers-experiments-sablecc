/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.inothnagel.compilers.visual_shapes_manipulator.generated.node;

import com.inothnagel.compilers.visual_shapes_manipulator.generated.analysis.*;

@SuppressWarnings("nls")
public final class ADrawCommand extends PCommand
{
    private TDraw _draw_;
    private PNoun _noun_;

    public ADrawCommand()
    {
        // Constructor
    }

    public ADrawCommand(
        @SuppressWarnings("hiding") TDraw _draw_,
        @SuppressWarnings("hiding") PNoun _noun_)
    {
        // Constructor
        setDraw(_draw_);

        setNoun(_noun_);

    }

    @Override
    public Object clone()
    {
        return new ADrawCommand(
            cloneNode(this._draw_),
            cloneNode(this._noun_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADrawCommand(this);
    }

    public TDraw getDraw()
    {
        return this._draw_;
    }

    public void setDraw(TDraw node)
    {
        if(this._draw_ != null)
        {
            this._draw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._draw_ = node;
    }

    public PNoun getNoun()
    {
        return this._noun_;
    }

    public void setNoun(PNoun node)
    {
        if(this._noun_ != null)
        {
            this._noun_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._noun_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._draw_)
            + toString(this._noun_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._draw_ == child)
        {
            this._draw_ = null;
            return;
        }

        if(this._noun_ == child)
        {
            this._noun_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._draw_ == oldChild)
        {
            setDraw((TDraw) newChild);
            return;
        }

        if(this._noun_ == oldChild)
        {
            setNoun((PNoun) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
